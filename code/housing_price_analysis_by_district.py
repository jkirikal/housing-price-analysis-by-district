# -*- coding: utf-8 -*-
"""housing-price-analysis-by-district.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18l8KE3Hqp_xkqSy7PUqK-m2cK_3Cs4zu
"""

!pip install contextily
#!pip install Pillow

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import geopandas as gpd
import contextily as cx
from shapely.ops import cascaded_union
import os
from PIL import Image

!git clone https://github.com/jkirikal/housing-price-analysis-by-district/

#load the data
data = pd.read_csv("/content/housing-price-analysis-by-district/data/price_data.csv",encoding='latin-1')
gdf_tallinn = gpd.read_file('/content/housing-price-analysis-by-district/data/geospatial/tallinn_asumid/t02_41_asum.shp')
gdf_tartu = gpd.read_file('/content/housing-price-analysis-by-district/data/geospatial/tartu_asumid/Rahvastik_linnaosa.shp')
inflation08 = pd.read_csv("/content/housing-price-analysis-by-district/data/inflation/inflation2008-2023.csv")
inflation16 = pd.read_csv("/content/housing-price-analysis-by-district/data/inflation/inflation2016-2023.csv")
inflation18 = pd.read_csv("/content/housing-price-analysis-by-district/data/inflation/inflation2018-2023.csv")
inflation21 = pd.read_csv("/content/housing-price-analysis-by-district/data/inflation/inflation2021-2023.csv")
salaries1 = pd.read_csv("/content/housing-price-analysis-by-district/data/salaries1.csv")
salaries2 = pd.read_csv("/content/housing-price-analysis-by-district/data/salaries2.csv")

#data formatting and preparation

##price data
data.date = data.date.astype("str")
data["date"] = pd.to_datetime(data["date"], format='%m-%Y')
data = data.replace('-', 0)
data.price = data.price.astype("float")
data.actives = data.actives.astype("int")
data.advertisements = data.advertisements.astype("int")

##geospatial data tallinn
gdf_tallinn.loc[gdf_tallinn["asumi_nimi"]=="Kadriorg","linnaosa_n"] = "Kadriorg"
gdf_tallinn.loc[gdf_tallinn["asumi_nimi"]=="Vanalinn","linnaosa_n"] = "Vanalinn"
#changes format of "[district] linnaosa" to "[district]"
for row in gdf_tallinn.linnaosa_n:
  first_part = row.split()[0]
  if(first_part[-1]=='a' and first_part != "Pirita"): first_part = first_part[:-1]
  gdf_tallinn.loc[gdf_tallinn["linnaosa_n"]==row,"linnaosa_n"] = first_part
gdf_tallinn.rename(columns={'linnaosa_n': 'district'}, inplace=True)
# remove Aegna, because we don't have data on Aegna
gdf_tallinn = gdf_tallinn[gdf_tallinn.asumi_nimi != "Aegna"]
#joining district geometric units
gdf_tallinn = gdf_tallinn[['district', 'geometry']]
gdf_tallinn = gdf_tallinn.dissolve(by='district', aggfunc='sum')

##Tallinn districts
tlncities = ["Haabersti","Kesklinn","Kristiine","Lasnamäe","Mustamäe","Nõmme","Pirita","Põhja-Tallinn","Vanalinn","Kadriorg"]

##geospatial data tartu
for row in gdf_tartu.NIMI:
  if 'linna' in row:
    gdf_tartu["NIMI"] = gdf_tartu["NIMI"].replace({row:row[0:-1]})
gdf_tartu.rename(columns={'NIMI': 'district'}, inplace=True)

##Tartu districts
trtcities = ["Tähtvere","Maarjamõisa", "Raadi-Kruusamäe", "Karlova", "Kesklinn", "Ihaste",
 "Jaamamõisa", "Annelinn", "Veeriku", "Ülejõe", "Vaksali", "Variku", "Tammelinn",
 "Tähtvere", "Ränilinn", "Supilinn", "Ropka", "Ropka tööstusrajoon"]

##inflation data
mappings = {'jaanuar':'01','veebruar': '02','märts': '03','aprill': '04','mai': '05','juuni': '06','juuli': '07','oktoober': '10','detsember': '12','august': '08','september': '09','november': '11'}

inflation08.Ajavahemik = inflation08.Ajavahemik.apply(lambda x: mappings[x.split()[0]]+"-"+x.split()[1])
inflation08.Ajavahemik = pd.to_datetime(inflation08.Ajavahemik, format='%m-%Y')
inflation08 = inflation08.rename(columns={'Ajavahemik': 'date'})

inflation16.Ajavahemik = inflation16.Ajavahemik.apply(lambda x: mappings[x.split()[0]]+"-"+x.split()[1])
inflation16.Ajavahemik = pd.to_datetime(inflation16.Ajavahemik, format='%m-%Y')
inflation16 = inflation16.rename(columns={'Ajavahemik': 'date'})

inflation18.Ajavahemik = inflation18.Ajavahemik.apply(lambda x: mappings[x.split()[0]]+"-"+x.split()[1])
inflation18.Ajavahemik = pd.to_datetime(inflation18.Ajavahemik, format='%m-%Y')
inflation18 = inflation18.rename(columns={'Ajavahemik': 'date'})

inflation21.Ajavahemik = inflation21.Ajavahemik.apply(lambda x: mappings[x.split()[0]]+"-"+x.split()[1])
inflation21.Ajavahemik = pd.to_datetime(inflation21.Ajavahemik, format='%m-%Y')
inflation21 = inflation21.rename(columns={'Ajavahemik': 'date'})

inflations = [inflation08,inflation16,inflation18,inflation21]

##salaries data
salaries1 = salaries1.transpose().iloc[2:]
salaries1.columns=["median_salary"]
salaries1.reset_index(inplace=True)
salaries1.rename(columns={'index': 'quarter'}, inplace=True)
salaries1 = salaries1[salaries1['quarter'].str.contains('kvartal')]
salaries1 = salaries1.iloc[:-7]

salaries2 = salaries2.transpose().iloc[2:]
salaries2.columns=["median_salary"]
salaries2.reset_index(inplace=True)
salaries2.rename(columns={'index': 'quarter'}, inplace=True)

quarter_mappings = {"I":"03-31","II":"06-30","III":"09-30","IV":"12-31"}

salaries = pd.concat([salaries1,salaries2])
salaries.quarter = salaries.quarter.apply(lambda x: quarter_mappings[x.split()[1]]+"-"+x.split()[0])
salaries.quarter = pd.to_datetime(salaries.quarter, format='%m-%d-%Y')
salaries.set_index('quarter', inplace=True)

#joining relevant data of the two dataframes
date = "2023-11"
m2 = "median price/m2"

# Tallinn
merged_df_tallinn = pd.merge(data[(data.date==date) & (data.city=="Tallinn")], gdf_tallinn, on='district', how='inner')
gdf_tallinn_test = gpd.GeoDataFrame(merged_df_tallinn, geometry='geometry')

# Tartu
merged_df_tartu = pd.merge(data[(data.date==date) & (data.city=='Tartu')], gdf_tartu, on="district", how="inner")
gdf_tartu_test = gpd.GeoDataFrame(merged_df_tartu, geometry='geometry')

# changing crs of geoplot to work with contextily
gdf_tallinn_render = gdf_tallinn_test.to_crs(epsg=3857)
gdf_tartu_render = gdf_tartu_test.to_crs(epsg=3857)

#plt.title('Tallinn Districts')
ax1 = gdf_tallinn_render.plot(edgecolor='black', linewidth=0.2, column='price', legend=True, figsize=(10, 8),cmap='RdYlGn_r', alpha=0.95, zorder=2)
ax1.set_axis_off()
#cx.add_attribution(ax1, date, 20, color='black', position = (0.1,0.9), zorder=3)
#cx.add_attribution(ax1, m2, 20, color='black', position = (0.1,0.95), zorder=3)
cx.add_basemap(ax1, zorder=1)
#for x, y, label in zip(gdf_tallinn_render.geometry.centroid.x, gdf_tallinn_render.geometry.centroid.y, gdf_tallinn_render['district']):
#    ax1.annotate(label, xy=(x, y), xytext=(-25, -3), textcoords="offset points")
plt.savefig(f'Tallinn_latest_prices.png')
ax2 = gdf_tartu_render.plot(edgecolor='black', linewidth=0.5, column='price', legend=True, figsize=(10, 8), alpha=0.95,cmap='RdYlGn_r', zorder=2)
ax2.set_axis_off()
#cx.add_attribution(ax2, date, 20, color='black', position = (0.125,0.9), zorder=3)
#cx.add_attribution(ax2, m2, 20, color='black', position = (0.1,0.945), zorder=3)
cx.add_basemap(ax2, zorder=1)
#for x, y, label in zip(gdf_tartu_render.geometry.centroid.x, gdf_tartu_render.geometry.centroid.y, gdf_tartu_render['district']):
#    ax2.annotate(label, xy=(x, y), xytext=(-15, -3), textcoords="offset points")

#plt.xlabel('Longitude')
#plt.ylabel('Latitude')
#plt.savefig(f'Tartu_latest_prices.png')
plt.show()

!mkdir maps1/
!mkdir maps2/

def png_to_gif(input_folder, output_file, duration=100, loop=0):
    images = []

    # Load PNG images from the input folder
    for filename in sorted(os.listdir(input_folder)):
        if filename.endswith('.png'):
            file_path = os.path.join(input_folder, filename)
            img = Image.open(file_path)
            images.append(img)

    # Save as GIF
    images[0].save(
        output_file,
        save_all=True,
        append_images=images[1:],
        duration=duration#,
        # loop=loop
    )
# establishing what the numbers mean
m2 = "median price/m2"
# save all the maps in the charts folder
output_path = '/content/maps1'
# set the min and max range for the choropleth map
vmin, vmax = 1200, 5000
# start the for loop to create one map per year
for year in range(2007,2024):
  for month in range(1, 13):
      if year == 2007 and month < 5: continue
      if year == 2023 and month == 11: break
      if month < 10: month = "0" + str(month)
      date = f"{year}-{month}"
      merged_df = pd.merge(data[(data.date==date) & (data.city=="Tallinn")], gdf_tallinn, on='district', how='inner')
      gdf_tallinn_test = gpd.GeoDataFrame(merged_df, geometry='geometry')
      gdf_tallinn_render = gdf_tallinn_test.to_crs(epsg=3857)
      ax1 = gdf_tallinn_render.plot(edgecolor='black', linewidth=0.2, column='price', legend=True, figsize=(10, 8),cmap='RdYlGn_r', alpha=1, zorder=2, vmin=vmin, vmax=vmax)
      ax1.set_axis_off()
      cx.add_attribution(ax1, date, 20, color='black', position = (0.1,0.9), zorder=3)
      cx.add_attribution(ax1, m2, 20, color='black', position = (0.1,0.95), zorder=3)
      cx.add_basemap(ax1, zorder=1)
      for x, y, label in zip(gdf_tallinn_render.geometry.centroid.x, gdf_tallinn_render.geometry.centroid.y, gdf_tallinn_render['district']):
        ax1.annotate(label, xy=(x, y), xytext=(-25, -3), textcoords="offset points")

      # this will save the figure as a high-res png in the output path. you can also save as svg if you prefer.
      filepath = os.path.join(output_path, date+'_tallinn.png')
      chart = ax1.get_figure()
      chart.savefig(filepath, dpi=100)

png_to_gif(output_path, "tallinn.gif", 300)

output_path = '/content/maps2'
# set the min and max range for the choropleth map
vmin, vmax = 750, 3600
# start the for loop to create one map per year
for year in range(2007,2024):
  for month in range(1, 13):
      if year == 2007 and month < 5: continue
      if year == 2023 and month == 11: break
      if month < 10: month = "0" + str(month)
      date = f"{year}-{month}"
      merged_df_tartu = pd.merge(data[(data.date==date) & (data.city=='Tartu')], gdf_tartu, on="district", how="inner")
      gdf_tartu_test = gpd.GeoDataFrame(merged_df_tartu, geometry='geometry')
      gdf_tartu_render = gdf_tartu_test.to_crs(epsg=3857)
      ax2 = gdf_tartu_render.plot(edgecolor='black', linewidth=0.5, column='price', legend=True, figsize=(10, 8), alpha=1,cmap='RdYlGn_r', zorder=2, vmin=vmin, vmax=vmax)
      ax2.set_axis_off()
      cx.add_attribution(ax2, date, 20, color='black', position = (0.125,0.9), zorder=3)
      cx.add_attribution(ax2, m2, 20, color='black', position = (0.1,0.95), zorder=3)
      cx.add_basemap(ax2, zorder=1)
      for x, y, label in zip(gdf_tartu_render.geometry.centroid.x, gdf_tartu_render.geometry.centroid.y, gdf_tartu_render['district']):
        ax2.annotate(label, xy=(x, y), xytext=(-15, -3), textcoords="offset points")

      # this will save the figure as a high-res png in the output path. you can also save as svg if you prefer.
      filepath = os.path.join(output_path, date+'_tartu.png')
      chart = ax2.get_figure()
      chart.savefig(filepath, dpi=100)
png_to_gif(output_path, "tartu.gif", 300)

cities = {"Tallinn":tlncities,"Tartu":trtcities}
gdfs = {"Tallinn":gdf_tallinn,"Tartu":gdf_tartu}
years = ["2008","2016","2018","2021"]
districts = [tlncities]
end_date = "2023-11"
for city in cities.keys():
  for year in years:
    start_date = f"{year}-11"

    #calculate relative price growth for districts from {year}
    relevant_df = pd.DataFrame(cities[city],columns=["district"])
    growth = [0 for _ in range(len(cities[city]))]
    relevant_df["growth"] = growth
    for row in relevant_df.district:
      median = 100-(data[(data.city==city) & (data.district == city)&(data.date==start_date)]["price"].iloc[0] / data[(data.city==city) & (data.district == city)&(data.date==end_date)]["price"].iloc[0] * 100)

      try:
        relevant_df.loc[relevant_df.district == row,"growth"] = 100-(data[(data.city==city) & (data.district == row)&(data.date==start_date)]["price"].iloc[0] / data[(data.city==city) & (data.district == row)&(data.date==end_date)]["price"].iloc[0] * 100)
      except:
        relevant_df.loc[relevant_df.district == row,"growth"] = median
    relevant_df = relevant_df[relevant_df['growth'] != 100]

    relevant_df["relative_growth"] = relevant_df['growth'].apply(lambda x: x - median)
    print(relevant_df,median)
    max_val = int(relevant_df["relative_growth"].max())
    min_val = int(abs(relevant_df["relative_growth"].min()))
    border = max(max_val,min_val)


    #merge
    merged_df = pd.merge(relevant_df, gdfs[city], on='district', how='inner')
    merged_df = gpd.GeoDataFrame(merged_df, geometry='geometry')
    merged_df = merged_df.to_crs(epsg=3857)

    ax = merged_df.plot(edgecolor='black', linewidth=0.2, column='relative_growth', legend=True, figsize=(10, 8),cmap='coolwarm', alpha=0.95, zorder=2,norm=plt.Normalize(vmin=border, vmax=-border))
    ax.set_axis_off()
    # cx.add_attribution(ax1, "5 years", 20, color='black', position = (0.1,0.8), zorder=3)
    # cx.add_attribution(ax1, "price change relative to median price change by %", 20, color='black', position = (0.1,0.85), zorder=3)
    cx.add_basemap(ax, zorder=1)
    # for x, y, label in zip(gdf_tallinn_render.geometry.centroid.x, gdf_tallinn_render.geometry.centroid.y, gdf_tallinn_render['district']):
    #     ax1.annotate(label, xy=(x, y), xytext=(-25, -3), textcoords="offset points")
    filepath = os.path.join('/content', f'{city}PriceDiff{year}.png')
    chart = ax.get_figure()
    chart.savefig(filepath, dpi=300)

#chart for activity change
plt.figure(figsize=(10, 8))
plt.ylabel("actives")
data = data[data.district != "Tallinn"]
for district in tlncities:
  tlndata = data[(data.city=="Tartu") & (data.district == district)&(data.actives!=0)&(data.date>="2010")]
  if len(tlndata) == 0:
    continue
  tlndata.set_index('date', inplace=True)
  tlndata["actives"].plot()
plt.legend(tlncities)
# tickvalues = range(0,len(tlndata))
# plt.xticks(ticks = tickvalues ,labels = tlndata.model.values, rotation = 'vertical')
plt.show()

#chart for price change
import seaborn as sns
years = ["2008","2016","2018","2021"]
cities = ["Tallinn","Tartu"]
plt.style.use('seaborn-v0_8')
districts = [tlncities, trtcities]
for c in range(len(cities)):
  for year in years:
    palette = sns.color_palette("tab20_r", len(districts[c]))
    plt.figure(figsize=(10, 8))
    plt.ylabel("price/m2")
    for district in range(len(districts[c])):
      relevant_data = data[(data.city==cities[c]) & (data.district == districts[c][district])&(data.price!=0)&(data.date>=f"{year}-11")]
      if len(relevant_data) == 0:
        continue
      relevant_data.set_index('date', inplace=True)
      relevant_data["price"].plot(color=palette[district],linewidth=2)

    plt.grid(True)
    sns.despine()
    plt.legend(districts[c])
    #plt.savefig(f'{cities[c]}_prices_{year[2:]}.png')
    plt.show()

years = ["2008","2016","2018","2021"]
cities = ["Tallinn","Tartu"]
palette = sns.color_palette("tab10", 3)
for city in cities:
  for i in range(len(years)):
    df = inflations[i].copy()
    #convert inflation data relative to first datapoint
    relevant_data = data[(data.city==city) & (data.district == city)&(data.date>=years[i])]
    first_datapoint = relevant_data.price.iloc[0]

    df["Väärtus"] = df["Väärtus"].apply(lambda x: first_datapoint+x*first_datapoint/100)

    #merge and create new column for difference between prices and inflation-on-price
    merged_inflation = pd.merge(relevant_data, df, on="date", how="left")
    merged_inflation.loc[f"{years[i]}-01-01","Väärtus"] = first_datapoint
    merged_inflation["difference"] = (merged_inflation["price"] - merged_inflation["Väärtus"])/merged_inflation["Väärtus"]*100

    #set index
    merged_inflation.set_index('date', inplace=True)
    #chart for price change
    fig, ax = plt.subplots()
    plt.ylabel("price/m2")
    plt.style.use('seaborn-v0_8')
    ax = merged_inflation["price"].plot(label=f'Median {city} m2 price',color=palette[0],linewidth=2)
    ax = merged_inflation['Väärtus'].plot(label=f'Inflation in relation to Jan {years[i]} median price',color=palette[1],linewidth=2)
    ax2 = ax.twinx()
    ax2 = merged_inflation["difference"].plot(secondary_y=['difference'], rot=0, label='Difference of price from inflation by %', color=palette[2],linewidth=2, alpha=0.5)
    ax2.set_ylabel('difference %')
    ax.legend(loc='upper left')
    ax2.legend(loc='upper right')
    #plt.savefig(f'inflation_{city}_{years[i]}.png')
    plt.show()



cities = ["Tallinn","Tartu"]
palette = sns.color_palette("tab10", 3)

plt.figure(figsize=(10, 8))
salaries["median_salary"].plot(color=palette[2],linewidth=2)

relevant1 = data[(data.city=="Tallinn") & (data.district == "Tallinn")&(data.price!=0)&(data.date>="2007")]
relevant2 = data[(data.city=="Tartu") & (data.district == "Tartu")&(data.price!=0)&(data.date>="2007")]
relevant1.set_index('date', inplace=True)
relevant2.set_index('date', inplace=True)
relevant1["price"].plot(color=palette[0],linewidth=2)
relevant2["price"].plot(color=palette[1],linewidth=2)

plt.ylabel("€")
plt.grid(True)
sns.despine()
plt.legend(["Median salary in Estonia","Tallinn median m2 price","Tartu median m2 price"])
plt.style.use('seaborn-v0_8')
plt.savefig(f'median_salary_vs_housing.png')
plt.show()

